apply plugin: 'com.github.johnrengelman.shadow'
jacoco {
  toolVersion = '0.8.0'
}

// Exclude classes, packages from Jacoco report, which we don't need to add unit tests for.
jacocoTestReport {
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(dir: it,
              exclude: ['com/linkedin/cdi/factory'])
    })
  }
}

apply from: "$rootDir/gradle/java-publishing.gradle"

dependencies {
  compile externalDependency.'gson'
  compile externalDependency.'gobblin-core'
  compile externalDependency.'gobblin-core-base'
  compile externalDependency.'gobblin-crypto'
  compile externalDependency.'gobblin-http'
  compile externalDependency.'gobblin-runtime'
  compile externalDependency.'gobblin-metadata'
  compile externalDependency.'gobblin-metastore'
  compile externalDependency.'awsCore'
  compile externalDependency.'awsApacheHttp'
  compile externalDependency.'awsHttpSpi'
  compile externalDependency.'awsS3'
  compile externalDependency.'awsUtils'
  compile externalDependency.'commonsValidator'
  compile externalDependency.'guava'
  compile externalDependency.'lombok'
  compile externalDependency.'commonsLang3'
  compile externalDependency.'testng'
  compile externalDependency.'jhyde'

  runtime externalDependency.'gobblin-azkaban'
  runtime externalDependency.'gobblin-kafka-08'
  runtime externalDependency.'gobblin-kafka-common'
  runtime externalDependency.'gobblin-metrics'
  runtime externalDependency.'gobblin-data-management'
  runtime externalDependency.'gobblin-sql'
  runtime externalDependency.'gson'
  runtime externalDependency.'jodaTime'

  testCompile externalDependency.'jmockit'
  testCompile externalDependency.'powermock-core'
  testCompile externalDependency.'powermock-api-mockito'
  testCompile externalDependency.'powermock-module-testng'
  testCompile externalDependency.'mockito-core'

//  compile externalDependency.'slf4j-api'
//  runtime externalDependency.'commons-csv'
//  runtime externalDependency.config
//  runtime externalDependency.'pegasus-data'
//  runtime externalDependency.reflections
//  testCompile externalDependency.hsqldb
}

// Exclude dependencies that are already on the grid from the Hadoop zip
configurations {

  // dependencies not needed from compile, unit testing, nor production will
  // be excluded from the package
  all*.exclude group: 'com.linkedin.hadoop'
  all*.exclude group: 'com.linkedin.hive'
  all*.exclude group: 'com.linkedin.pig'
  all*.exclude group: 'com.linkedin.azkaban'
  all*.exclude group: 'com.linkedin.azkaban-plugins'
  all*.exclude group: 'com.linkedin.spark'
  all*.exclude group: 'kafka'
  all*.exclude group: 'org.apache.kafka'
  all*.exclude group: 'org.apache.hive'
  all*.exclude group: 'ch.qos.logback'
  all*.exclude group: 'com.ibm.icu', module: 'icu4j'
  all*.exclude group: 'org.pentaho'
}

shadowJar {
  zip64 true
  dependencies {
    include dependency('com.linkedin.cdi:.*')
    include dependency('com.squareup.retrofit:.*')
    include dependency('com.squareup.okhttp:.*')
    include dependency('com.squareup.okhttp3:.*')
    include dependency('com.squareup.okio:.*')
    include dependency('org.testng:.*')
  }

  exclude 'log4j.xml'
  exclude 'log4j.properties'
  exclude 'org/apache/log4j/**'
  exclude 'org/apache/spark/**'
  exclude 'org/slf4j/**'
  exclude 'javax/ws/rs/**'

  relocate('com.squareup', 'cdi.shaded.com.squareup')
  relocate('retrofit', 'cdi.shaded.retrofit')
  relocate('okhttp3', 'cdi.shaded.okhttp3')
  relocate('okio', 'cdi.shaded.okio')
  relocate('org.testng', 'cdi.shaded.org.testng')
  mergeServiceFiles()
}

artifacts {
  archives shadowJar
}

test {
  doFirst {
    def jmockitPath = configurations.getByName("testCompile").copy().files.find {it.name.contains("jmockit") }.absolutePath
    jvmArgs "-javaagent:$jmockitPath"
  }
}
