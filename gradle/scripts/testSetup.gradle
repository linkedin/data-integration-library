// Copyright 2021 LinkedIn Corporation. All rights reserved.
// Licensed under the BSD-2 Clause license.
// See LICENSE in the project root for license information.

subprojects {
  plugins.withType(JavaPlugin) {
    plugins.apply('checkstyle')

    test {
      if (project.hasProperty("printTestOutput")) {
        testLogging.showStandardStreams = true
      }
      useTestNG () {
        excludeGroups 'ignore', 'performance'
        if (project.hasProperty('skipTestGroup')) {
          excludeGroups skipTestGroup
        }
        if (project.hasProperty('runTestGroups')) {
          includeGroups project.runTestGroups
        }
      }
      testLogging {
        events "started","skipped","passed","failed"
        exceptionFormat "full"
      }
      // Some tests require MySQL we can either download an embedded Wix image or use a pre-installed version
      if (rootProject.hasProperty('usePreinstalledMysql') && Boolean.parseBoolean(rootProject.usePreinstalledMysql)) {
        systemProperty 'gobblin.metastore.testing.embeddedMysqlEnabled', 'false'
      }
    }

    checkstyle {
      toolVersion = '7.6.1'
      configFile = rootProject.file('gradle/checkstyle/checkstyle.xml')
    }

    checkstyleMain.source = ["src/main/java", "src/test/java"]
  }

  tasks.withType(Test) {

    // a collection to track failedTests
    ext.failedTests = []

    afterTest { descriptor, result ->
      if (result.resultType == TestResult.ResultType.FAILURE) {
        String failedTest = "${descriptor.className}::${descriptor.name}"
        logger.debug("Adding " + failedTest + " to failedTests...")
        failedTests << [failedTest]
      }
    }

    afterSuite { suite, result ->
      if (!suite.parent) { // will match the outermost suite
        // logs each failed test
        if (!failedTests.empty) {
          logger.lifecycle("Failed tests:")
          failedTests.each { failedTest ->
            logger.lifecycle("${failedTest}")
          }
        }
      }
    }
  }
}
